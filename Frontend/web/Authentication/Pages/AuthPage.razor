@using Application_Layer.UserCommand.UserAuth;
@using DomainLayer.Models;
@using FluentValidation
@using Microsoft.AspNetCore.Components.Authorization;
@using Newtonsoft.Json;
@using Web.Components;
@inject AuthenticationStateProvider authStateProvicder
@inject NavigationManager navManager
@page "/auth/login"
@layout MainLayout

<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid Class="align-content-center justify-center">
        <MudItem xs="9" md="5" lg="3">
            <MudCard Class="pa-4">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Login</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" Href="/" Color="Color.Default" />
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    <div class="d-flex justify-center align-content-center">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 64 64" width="96px" height="96px"><linearGradient id="79mwFS8UXi9i9kxtPFHWVa" x1="30" x2="30" y1="2" y2="62.513" gradientUnits="userSpaceOnUse" spreadMethod="reflect"><stop offset="0" stop-color="#1a6dff" /><stop offset="1" stop-color="#c822ff" /></linearGradient><path fill="url(#79mwFS8UXi9i9kxtPFHWVa)" d="M30,32c-3.309,0-6,2.691-6,6c0,2.215,1.21,4.149,3,5.188V45c0,1.654,1.346,3,3,3s3-1.346,3-3 v-1.812c1.79-1.039,3-2.973,3-5.188C36,34.691,33.309,32,30,32z M31,44v1c0,0.551-0.449,1-1,1s-1-0.449-1-1v-1H31z M30,42 c-2.206,0-4-1.794-4-4s1.794-4,4-4s4,1.794,4,4S32.206,42,30,42z" /><linearGradient id="79mwFS8UXi9i9kxtPFHWVb" x1="34" x2="34" y1="2" y2="62.513" gradientUnits="userSpaceOnUse" spreadMethod="reflect"><stop offset="0" stop-color="#1a6dff" /><stop offset="1" stop-color="#c822ff" /></linearGradient><path fill="url(#79mwFS8UXi9i9kxtPFHWVb)" d="M50,35.202V28c0-2.757-2.243-5-5-5h-4v-2c0-1.103-0.897-2-2-2h-1v-8c0-4.411-3.589-8-8-8 s-8,3.589-8,8v8h-1c-1.103,0-2,0.897-2,2v2h-4c-2.757,0-5,2.243-5,5v24c0,2.757,2.243,5,5,5h28.051c0.252,2.244,2.139,4,4.449,4 c2.481,0,4.5-2.019,4.5-4.5v-2.343c3.617-1.58,6-5.174,6-9.157C58,40.171,54.559,36.131,50,35.202z M39,23h-4v-2h4V23z M24,11 c0-3.309,2.691-6,6-6s6,2.691,6,6v8h-1c-1.103,0-2,0.897-2,2v2h-6v-2c0-1.103-0.897-2-2-2h-1V11z M21,21h4v2h-4V21z M36,53H24 c-1.103,0-2,0.897-2,2h-7c-1.654,0-3-1.346-3-3V28c0-1.654,1.346-3,3-3h4h8h6h8h4c1.654,0,3,1.346,3,3v7c-5.514,0-10,4.486-10,10 c0,3.604,1.9,6.864,5,8.651V55h-5C38,53.897,37.103,53,36,53z M50.666,52.534L50,52.771V56.5c0,1.378-1.122,2.5-2.5,2.5 S45,57.878,45,56.5v-4.066l-0.554-0.276C41.704,50.793,40,48.05,40,45c0-4.411,3.589-8,8-8s8,3.589,8,8 C56,48.377,53.856,51.405,50.666,52.534z" /><linearGradient id="79mwFS8UXi9i9kxtPFHWVc" x1="48" x2="48" y1="39.75" y2="50.378" gradientUnits="userSpaceOnUse" spreadMethod="reflect"><stop offset="0" stop-color="#6dc7ff" /><stop offset="1" stop-color="#e6abff" /></linearGradient><path fill="url(#79mwFS8UXi9i9kxtPFHWVc)" d="M48 40A5 5 0 1 0 48 50A5 5 0 1 0 48 40Z" /></svg>
                    </div>
                    <MudTextField Label="Username" Class="mt-3" Required="true" RequiredError="Username is required!"
                    @bind-Value="model.Username" For="@(() => model.Username)" Variant="Variant.Outlined" />
                    <MudTextField Label="Password" Class="mt-3" Required="true" RequiredError="Password is required!"
                    @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password" Variant="Variant.Outlined" />
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto mt-4" FullWidth Style="height:60px">Login</MudButton>
                 </MudCardContent>
             </MudCard>
         </MudItem>
     </MudGrid>
 </EditForm>

 @code {
    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] private IDialogService DialogService { get; set; }
    [Inject] HttpClient httpClient { get; set; }
    MudForm form;
    UserAuthCommand model = new UserAuthCommand();
    private bool isVisible;

    private async Task OnValidSubmit()
    {

        var options = new DialogOptions { ClassBackground = "bg-filter", DisableBackdropClick = true };
        var dial = await DialogService.ShowAsync<BluryDialog>("Authentication...", options);

        await Task.Delay(1000);
        var userAccount = await AuthAsync(model);
        if (userAccount == null)
        {
            dial.Close();
            DialogService.ShowMessageBox(
                        "Info",
                        "Username atau Password Salah!",
                        yesText: "Ok");
            return;
        }
        StateHasChanged();

        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvicder;
        await customAuthStateProvider.UpdateAuthenticationState(userAccount);

        dial.Close();
        navManager.NavigateTo("/", true);

    }

    public async Task<UserToken> AuthAsync(UserAuthCommand _account)
    {
        var response = await httpClient.PostAsJsonAsync(@"api/UserAccount/authenticate", _account);

        if (response.IsSuccessStatusCode)
        {
            var responseContent = await response.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<UserToken>(responseContent);
        }
        else
        {
            return null;
        }
    }
}
